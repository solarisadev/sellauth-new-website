<div class="container component" data-component-id="{{ componentId }}">
  <div x-data="cartPage">
    <section class="py-5-nav cart">
      <div class="section-title">
        <h1>Shopping Cart</h1>
      </div>
      <div class="row">
        <div class="col-12 col-lg-8 mb-4">
          <div x-cloak x-show="fullCartShowMessages" class="fade show">
            <div class="alert alert-warning p-4 rounded mb-4">
              <template x-for="(message, index) in fullCartMessages" :key="index">
                <p x-text="message"></p>
              </template>
            </div>
          </div>

          <div>
            <div x-show="fullCartLoading" class="p-4 border rounded text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>

            <template x-if="!fullCartLoading">
              <div>
                <template x-if="fullCart.length === 0">
                  <div class="p-4 border rounded text-center">
                    <p class="text-muted">Your cart is empty.</p>
                  </div>
                </template>

                <template x-if="fullCart.length > 0">
                  <div class="d-flex flex-column gap-3">
                    <template x-for="(cartItem, index) in fullCart" :key="index">
                      <div class="d-flex flex-column p-1 border rounded product">
                        <div class="d-flex align-items-center gap-2">
                          <div class="d-flex justify-content-center align-items-center w-100" style="max-width: 6rem;">
                            <template x-if="cartItem.product.image_url">
                              <img :src="cartItem.product.image_url" class="img-fluid rounded" loading="lazy" />
                            </template>
                            <template x-if="!cartItem.product.image_url">
                              <div class="d-flex justify-content-center align-items-center text-muted">
                                <i class="bi bi-box"></i>
                              </div>
                            </template>
                          </div>
                          <div class="flex-grow-1 text-left">
                            <div class="d-flex justify-content-between align-items-center">
                              <a :href="'/product/' + cartItem.product.path" class="text-white fw-bold text-decoration-none">
                                <span x-text="cartItem.product.name"></span>
                              </a>
                              <button type="button" @click="removeItem(index)" class="btn text-danger px-2 me-2">
                                <i class="fas fa-trash-alt"></i>
                              </button>
                            </div>
                            <p class="text-muted small" x-text="cartItem.variant.name"></p>
                          </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-center border-top pt-2">
                          <div class="input-group" style="max-width: 8rem;">
                            <button class="btn btn-outline-primary input-group-btn" type="button" @click="changeQuantity(index, cartItem.quantity - 1)" :disabled="cartItem.quantity <= getMinQuantity(index)">-</button>
                            <input type="number" x-model.number="cartItem.quantity" class="form-control text-center" />
                            <button class="btn btn-outline-primary input-group-btn" type="button" @click="changeQuantity(index, cartItem.quantity + 1)" :disabled="cartItem.quantity >= getMaxQuantity(index)">+</button>
                          </div>
                          <div>
                            <p class="fw-medium me-2" x-text="formatPrice(getItemSinglePrice(index), cartItem.product.currency)"></p>
                          </div>
                        </div>
                      </div>
                    </template>
                  </div>
                </template>
              </div>
            </template>
          </div>
        </div>
        <div class="col-12 col-lg-4">
          <div class="d-flex flex-column gap-4 p-4 border rounded form">
            <div>
              <div class="mb-4 pb-2 border-bottom">
                <label class="form-label">Your Order</label>
                <div class="d-flex justify-content-between">
                  <span class="text-muted">Subtotal</span>
                  <span class="fw-bold" x-text="formatPrice(cartTotalPrice, cartCurrency)"></span>
                </div>
              </div>

              <div x-cloak x-show="submitError" class="alert alert-danger p-4 rounded my-4">
                <span x-text="submitError"></span>
              </div>

              <button
                type="button"
                x-on:click="checkout"
                class="w-100 mb-3 btn btn-outline-primary"
                :disabled="fullCartLoading || fullCart.length === 0 || isSubmitting"
              >
                <span>Checkout</span>
                <template x-if="!isSubmitting">
                  <svg xmlns="http://www.w3.org/2000/svg" class="size-5" fill="currentColor" viewBox="0 0 256 256"><path d="M230.14,58.87A8,8,0,0,0,224,56H62.68L56.6,22.57A8,8,0,0,0,48.73,16H24a8,8,0,0,0,0,16h18L67.56,172.29a24,24,0,0,0,5.33,11.27,28,28,0,1,0,44.4,8.44h45.42A27.75,27.75,0,0,0,160,204a28,28,0,1,0,28-28H91.17a8,8,0,0,1-7.87-6.57L80.13,152h116a24,24,0,0,0,23.61-19.71l12.16-66.86A8,8,0,0,0,230.14,58.87ZM104,204a12,12,0,1,1-12-12A12,12,0,0,1,104,204Zm96,0a12,12,0,1,1-12-12A12,12,0,0,1,200,204Zm4-74.57A8,8,0,0,1,196.1,136H77.22L65.59,72H214.41Z"></path></svg>
                </template>
                <template x-if="isSubmitting">
                  <svg xmlns="http://www.w3.org/2000/svg" class="size-5 animate-spin" fill="currentColor" viewBox="0 0 256 256"><path d="M232,128a104,104,0,0,1-208,0c0-41,23.81-78.36,60.66-95.27a8,8,0,0,1,6.68,14.54C60.15,61.59,40,93.27,40,128a88,88,0,0,0,176,0c0-34.73-20.15-66.41-51.34-80.73a8,8,0,0,1,6.68-14.54C208.19,49.64,232,87,232,128Z"></path></svg>
                </template>
              </button>
            </div>
            {% if shop.recaptcha_key %}
            <div class="text-center">
              <p class="text-muted small">
                This site is protected by reCAPTCHA and the Google 
                <a href="https://policies.google.com/privacy" target="_blank">Privacy Policy</a> and
                <a href="https://policies.google.com/terms" target="_blank">Terms of Service</a> apply.
              </p>
            </div>
            {% endif %}
          </div>
        </div>
      </div>
    </section>
  </div>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('cartPage', () => ({
      fullCart: [],
      fullCartLoading: false,
      fullCartMessages: [],
      fullCartShowMessages: false,
      isSubmitting: false,
      submitError: null,
      checkoutUrl: null,

      init: function () {
        if (this.appCart.items.length > 0) {
          this.fetchFullCart();
        }
      },

      fetchFullCart: async function () {
        this.fullCartLoading = true;
        this.fullCartMessages = [];
        this.fullCartShowMessages = false;

        const url = new URL('{{ '/v1/cart' | apiInternalUrl }}');
        url.searchParams.append('shopId', '{{ shop.id }}');
        url.searchParams.append('cart', JSON.stringify(this.appCart.items));

        try {
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          const responseData = await response.json();

          if (responseData?.messages && responseData.messages.length > 0) {
            this.fullCartMessages = responseData.messages;
            this.fullCartShowMessages = true;
            setTimeout(() => {
              this.fullCartShowMessages = false;
            }, 5000);
          }

          // Update full cart state (this one contains product names, images, etc.)
          this.fullCart = responseData.fullCart;

          // Update global cart state
          this.appCart.set(responseData.cart);
        } catch (error) {
          console.error(error);
        } finally {
          this.fullCartLoading = false;
        }
      },

      getAvailableVolumeDiscount: function (index) {
        const item = this.fullCart[index];

        if (item.product.volume_discounts) {
          const volumeDiscounts = item.product.volume_discounts.sort((a, b) => a.quantity - b.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (item.quantity < parseInt(volumeDiscount.quantity)) {
              return volumeDiscount;
            }
          }
        }

        return null;
      },

      getAppliedVolumeDiscount: function (index) {
        const item = this.fullCart[index];

        if (item.product.volume_discounts) {
          const volumeDiscounts = item.product.volume_discounts.sort((a, b) => b.quantity - a.quantity);

          for (const volumeDiscount of volumeDiscounts) {
            if (item.quantity >= parseInt(volumeDiscount.quantity)) {
              return volumeDiscount;
            }
          }
        }

        return null;
      },

      getMinQuantity: function (index) {
        const item = this.fullCart[index];
        
        const min = item.variant.quantity_min || 1;

        if (item.variant.stock === 0) {
          return 0;
        }

        return min;
      },

      getMaxQuantity: function (index) {
        const item = this.fullCart[index];
        
        const max = item.variant.quantity_max || 10000;

        if (item.variant.stock === 0) {
          return 0;
        }

        if (item.product.hide_stock_count) {
          return max;
        }

        if (item.variant.stock === -1) {
          return max;
        }

        return Math.min(max, item.variant.stock);
      },

      changeQuantity: function (index, quantity) {
        const min = this.getMinQuantity(index);
        const max = this.getMaxQuantity(index);
        const newQuantity = Math.min(Math.max(min, quantity), max);

        const item = this.fullCart[index];

        this.fullCart[index].quantity = newQuantity;
        this.appCart.editQuantity(item.variantId, newQuantity);
      },

      removeItem: function (index) {
        const item = this.fullCart[index];

        this.fullCart.splice(index, 1);

        this.appCart.remove(item.variant.id);
      },

      getItemSinglePrice: function (index) {
        const item = this.fullCart[index];

        const volumeDiscount = this.getAppliedVolumeDiscount(index);

        if (volumeDiscount) {
          return item.variant.price * (1 - volumeDiscount.percentage / 100);
        }

        return item.variant.price;
      },

      get cartCurrency() {
        return this.fullCart.length > 0 ? this.fullCart[0].product.currency : 'USD';
      },

      get cartTotalPrice() {
        return this.fullCart.reduce((acc, item) => acc + (item.quantity * this.getItemSinglePrice(this.fullCart.indexOf(item))), 0);
      },

      generateRecaptchaToken: async function () {
        {% if shop.recaptcha_key %}
        return new Promise((resolve) => {
          grecaptcha.ready(
            () =>
              void (async () => {
                const token = await grecaptcha.execute(
                  '{{ shop.recaptcha_key }}',
                  { action: 'checkout_s{{ shop.id }}' },
                );

                resolve(token);
              })(),
          );
        });
        {% else %}
        return null;
        {% endif %}
      },

      checkout: async function () {
        if (this.isSubmitting) {
          return;
        }

        const formData = {
          cart: this.appCart.items,
          shopId: '{{ shop.id }}',
        };

        try {
          formData.recaptchaToken = await this.generateRecaptchaToken();
        } catch (error) {
          this.submitError = 'reCAPTCHA cannot be loaded. Please refresh the page and turn off any ad blockers.';
          this.isSubmitting = false;
          return;
        }

        try {
          this.isSubmitting = true;

          const response = await fetch('{{ '/v1/checkout' | apiInternalUrl }}', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });

          const responseData = await response.json();

          if (responseData.url) {
            this.checkoutUrl = responseData.url;

            localStorage.setItem('cart', JSON.stringify([]));

            // Open in new tab if we're in an embed.
            if (this.isEmbed) {
              window.open(this.checkoutUrl, '_blank');
              this.isLoadingModalOpen = true;
            } else {
              window.location.href = this.checkoutUrl;
            }
          } else {
            this.isSubmitting = false;
            this.submitError = responseData?.message || 'Error in the AJAX request.';
          }
        } catch (error) {
          console.error(error);
          this.isSubmitting = false;
          this.submitError = 'Unexpected error. Please refresh the page and try again.';
        }
      },

      formatPrice(price, currency) {
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: currency,
          currencyDisplay: 'symbol'
        }).format(price);
      },
    }));
  });
</script>

{% if shop.recaptcha_key %}
<script src="https://www.google.com/recaptcha/api.js?render={{ shop.recaptcha_key }}"></script>
{% endif %}